import random
#hangman game
print("Let's play Hangman!")
print("y/n")
start = input()
while(start) == "n":
    print("Okay, but come back when you want a challenge!")
    start = input()
if(start) == "y":
    print("Do you know how to play?")
    print("y/n")
tutorial = input()
while(tutorial) == "n":
    print("Ok!")
    print("The object of the game is for you to guess the word I'm thinking of before an innocent man is hanged!But I am not fully evil, so I will give to the number of letters and show you where they are in the word. And I will give you as many tries as you want to guess a letter or to solve the puzzle before I send this man to his Doom. Beware that you only get 6 wrong answers before I pull the lever")
    print("Make sense?")
    print("y/n")
    tutorial = input()
    while(tutorial) == "n":
        print("I'm not sure how much clearer I can be. Try rereading it again. Does it make sense now?")
        print("y/n")
        tutorial = input()
    if(tutorial) == "y":
        print("     ")
if(tutorial) == "y":
    print("Ok! Let's get started")
    print("Let me wake up the wizard and have him conjure the interface.")
    print("*Muffled Boot Kick* Wake up! We have a game to Play!")
#letters
#not sure why this has to be here but it pitches a fit about the letters being used in the array/lists/things without it
#   Apparently it's because I could have just made each element in the array an "a", "b", etc.
a="a"
b="b"
c="c"
d="d"
e="e"
f="f"
g="g"
h="h"
i="i"
j="j"
k="k"
l="l"
m="m"
n="n"
o="o"
p="p"
q="q"
r="r"
s="s"
t="t"
u="u"
v="v"
w="w"
x="x"
y="y"
z="z"

#word list
#0 element will dictate how many "_"s for letters
word =     [4,w,o,r,d,0,0,0,0,0,0,0]
hangman =  [7,h,a,n,g,m,a,n,0,0,0,0]
computer = [8,c,o,m,p,u,t,e,r,0,0,0]
party =    [5,p,a,r,t,y,0,0,0,0,0,0]
paper =    [5,p,a,p,e,r,0,0,0,0,0,0]
silver =   [6,s,i,l,v,e,r,0,0,0,0,0]
food =     [4,f,o,o,d,0,0,0,0,0,0,0]
#if the indexed value returns "0", abort checks and move on

#print(word[0]) #this works to access the element I was looking for
#Need the randomizer here to chose something from the arrays
wordlist = [word,hangman,computer,party,paper,silver,food]
 
word_selection = random.choice (wordlist)
print(word_selection)
print(" I've chosen a word")
#Random(wordlist)
#Need to figure out how to call an array and a specific value within it

wrongcount = 0

def wrongcounter():
    global wrongcount
    wrongcount = wrongcount + 1
    return (wrongcount)
#wrongcounter() 
#this should increment the wrongcount by 1 and update the global value

bodycount = 0

def bodycounter():
    global bodycount
    bodycount = bodycount + 1
    return (bodycount)
#bodycounter()
#this should increment the bodycount by 1 and update the global value

#this is the correct placement for the body currently with end of game stuff hashed out
head = ("   ")
arm = ("   ")
torso = (" ")
arm2 = (" ")
leg = ("  ")
leg2 = ("  ")
trapdoor = ("____")
#head = ("   O")
#arm = ("  /")
#torso = ("|")
#arm2 = ("\ ")
#leg = (" /")
#leg2 = (" \ ")
#trapdoor = ("\   ")

def coroner(): #takes bodycount and adjusts the body part variables appropriately
    global bodycount
    global head
    global torso
    global arm
    global arm2
    global leg
    global leg2
    global trapdoor
    if(bodycount) == 1:
        head = ("   O")
        return (head)
    if(bodycount) == 2:
        torso = ("|")
        return(torso)
    if(bodycount) == 3:
        arm = ("  /")
        return(arm)
    if(bodycount) == 4:
        arm2 = ("\ ")
        return(arm2)
    if(bodycount) == 5:
        leg = (" /")
        return(leg)
    if(bodycount) == 6:
        leg2 = (" \ ")
        return(leg2)
    if(bodycount) == 7:
        trapdoor = ("\   ")
        return(trapdoor)

def cremator(): #resets the body
    global head
    global torso
    global arm
    global arm2
    global leg
    global leg2
    global trapdoor
    head = ("   ")
    arm = ("   ")
    torso = (" ")
    arm2 = (" ")
    leg = ("  ")
    leg2 = ("  ")
    trapdoor = ("____")
    return(head)
    return(torso)
    return(arm)
    return(arm2)
    return(leg)
    return(leg2)
    return(trapdoor)

position1 = ("_")
position2 = ("_")
position3 = ("_")
position4 = ("_")
position5 = ("_")
position6 = ("_")
position7 = ("_")
position8 = ("_")
position9 = ("_")

#build position updaters here
#one to flip "_" to " " based on the 0 element of chosen word
def num_of_letters():
    if(element0) == 1: #this didn't hate me
        position2 = (" ")
        position3 = (" ")
        position4 = (" ")
        position5 = (" ")
        position6 = (" ")
        position7 = (" ")
        position8 = (" ")
        position9 = (" ")
    
#openinginterface = (startingword, 0):
if(): #openinginterface) == 1:
    position2 = (" ")
    position3 = (" ")
    position4 = (" ")
    position5 = (" ")
    position6 = (" ")
    position7 = (" ")
    position8 = (" ")
    position9 = (" ")
if():#openinginterface) == 2:
    position3 = (" ")
    position4 = (" ")
    position5 = (" ")
    position6 = (" ")
    position7 = (" ")
    position8 = (" ")
    position9 = (" ")
if():#openinginterface) == 3:
    position4 = (" ")
    position5 = (" ")
    position6 = (" ")
    position7 = (" ")
    position8 = (" ")
    position9 = (" ")
if():#openinginterface) == 4:
    position5 = (" ")
    position6 = (" ")
    position7 = (" ")
    position8 = (" ")
    position9 = (" ")
if():#openinginterface) == 5:
    position6 = (" ")
    position7 = (" ")
    position8 = (" ")
    position9 = (" ")
if():#openinginterface) == 6:
    position7 = (" ")
    position8 = (" ")
    position9 = (" ")
if():#openinginterface) == 7:
    position8 = (" ")
    position9 = (" ")
if():#openinginterface) == 8:
    position9 = (" ")    
if():#openinginterface) == 9:
    print(" ")

    
#one to flip "_" to the corectly guessed letter based on the specific element for a specific position

#Master print for interface
#This has solved the interface replication
def interface():
    print("             _________"), print("             |         |"), print("             |      "+ str(head)), print("             |      "+arm+torso+arm2), print("             |       "+leg+leg2), print("             |"), print("     _________________"+trapdoor+"_________"), print(" "), print("                  "), print(position1+" "+position2+" "+position3+" "+position4+" "+position5+" "+position6+" "+position7+" "+position8+" "+position9), print(" ")

interface()
#tester sequence \|/
bodycounter(),coroner(),bodycounter(),interface(),coroner(),bodycounter(),interface(),coroner(),bodycounter(),interface(),coroner(),bodycounter(),interface(),coroner(),bodycounter(),interface(),coroner(),bodycounter(),interface(),coroner(),interface()







    
#print("             _________"), print("             |         |"), print("             |      "+ str(head)), print("             |      "+arm+torso+arm2), print("             |       "+leg+leg2), print("             |"), print("     _________________"+trapdoor+"_________"), print(" "), print("                  "), print(position1+" "+position2+" "+position3+" "+position4+" "+position5+" "+position6+" "+position7+" "+position8+" "+position9), print(" ")

#test input
wrong = 20 #input()
#need a solve input

#All body count advancement is here
#They all end with a wrongcounter going up. Might need to start them with the wrongcounter, I'm not sure. I just feel like this is going to be a source of frustration later
#I need to rebuild this so that if returns a counter from the wrong guess. And then build the counter to update the head variable in global scope. basically split this into 2 different funtions that just returns a single thing each
if(wrong) == "wr":
    wrongcount = wrongcount + 1
    if(wrongcount) == 1:
        head = ("   O")
        interface()
        wrong = input()
        print(" ")
        if(wrong) == "wr":
            wrongcount = wrongcount + 1
    if(wrongcount) == 2:
        torso = ("|")
        interface()
        wrong = input()
        print(" ")
        if(wrong) == "wr":
            wrongcount = wrongcount + 1
    if(wrongcount) == 3:
        arm = ("  /")
        interface()
        wrong = input()
        print(" ")
        if(wrong) == "wr":
            wrongcount = wrongcount + 1
    if(wrongcount) == 4:
        arm2 = ("\ ")
        interface()
        wrong = input()
        print(" ")
        if(wrong) == "wr":
            wrongcount = wrongcount + 1
    if(wrongcount) == 5:
        leg = (" /")
        interface()
        wrong = input()
        print(" ")
        if(wrong) == "wr":
            wrongcount = wrongcount + 1
    if(wrongcount) == 6:
        leg2 = (" \ ")
        interface()
        wrong = input()
        print(" ")
        if(wrong) == "wr":
            wrongcount = wrongcount + 1
    if(wrongcount) == 7:
        trapdoor = ("\   ")
        interface()
        wrongcount = wrongcount + 1
        print("*******Game over*******")
            
        
print("Try again?")
print("y/n")
tryagain = input ()
if(tryagain) == "y":
    print(" I'll figure out how to do that later")
    cremator()
    #random(wordlist)
interface()
#tryagain needs to reset wrongcounter to 0 and revert the bodycounter to 0. Then pick a new word from the list, reset the position counter to the value in the 0element, print interface, and then ask for the first guess.




#def display_info(first_name, last_name):
    #print('First Name:', first_name)
    #print('Last Name:', last_name)
    
#display_info(last_name = 'Cartman', first_name = 'Eric')
# so this worked. Let's see if it becomes global or just back to when it was defined. On the levels of scope








        

#Pass a whole page for animations if this compiler would keep the coursor in veiw the whole time
#print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*") #should be 26 lines













