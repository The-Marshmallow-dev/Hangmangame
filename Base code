import random

#Databases
#letters
a="a"
b="b"
c="c"
d="d"
e="e"
f="f"
g="g"
h="h"
i="i"
j="j"
k="k"
l="l"
m="m"
n="n"
o="o"
p="p"
q="q"
r="r"
s="s"
t="t"
u="u"
v="v"
w="w"
x="x"
y="y"
z="z"
#word list 
#0 element will dictate how many "_"s for letters
word =     [4,w,o,r,d,0,0,0,0,0,0,0]
hangman =  [7,h,a,n,g,m,a,n,0,0,0,0]
computer = [8,c,o,m,p,u,t,e,r,0,0,0]
party =    [5,p,a,r,t,y,0,0,0,0,0,0]
paper =    [5,p,a,p,e,r,0,0,0,0,0,0]
silver =   [6,s,i,l,v,e,r,0,0,0,0,0]
food =     [4,f,o,o,d,0,0,0,0,0,0,0]

#print(word[0]) #this works to access the element I was looking for
wordlist = [word,hangman,computer,party,paper,silver,food]
word_selection = random.choice(wordlist)
wrongcount = 0
bodycount = 0
status = 0
guess = 0
tryagain = 0 


head = ("   ")
arm = ("   ")
torso = (" ")
arm2 = (" ")
leg = ("  ")
leg2 = ("  ")
trapdoor = ("____")


position1 = ("_")
position2 = ("_")
position3 = ("_")
position4 = ("_")
position5 = ("_")
position6 = ("_")
position7 = ("_")
position8 = ("_")
position9 = ("_")

positions = [position1,position2,position3,position4,position5,position6,position7,position8,position9,0,0]
#there are 12 elements in the arrays for the words, need to make it so that the Positions array changes positions with spaces are equivelent to a 0 before comparing them. need to also make the positions array have at least 11 elements so that they come back the same.

#Functions
def openingsequence(): #opens the game when you first launch it
    print("Let's play Hangman!"), print("y/n")
    start = input()
    while(start) == "n":
        print("Okay, but come back when you want a challenge!")
        start = input()
    if(start) == "y":
        print("Do you know how to play?")
        print("y/n")
    tutorial = input()
    while(tutorial) == "n":
        print("Ok!")
        print("The object of the game is for you to guess the word I'm thinking of before an innocent man is hanged!But I am not fully evil, so I will give to the number of letters and show you where they are in the word. And I will give you as many tries as you want to guess a letter or to solve the puzzle before I send this man to his Doom. Beware that you only get 6 wrong answers before I pull the lever")
        print("Make sense?")
        print("y/n")
        tutorial = input()
        while(tutorial) == "n":
            print("I'm not sure how much clearer I can be. Try rereading it again. Does it make sense now?")
            print("y/n")
            tutorial = input()
        if(tutorial) == "y":
            print("     ")
    if(tutorial) == "y":
        print("Ok! Let's get started")
        print("Let me wake up the wizard and have him conjure the interface.")
    print("*Muffled Boot Kick* Wake up! We have a game to Play!")

def bodycounter():
    global bodycount
    bodycount = bodycount + 1
    return (bodycount) #this should increment the bodycount by 1 and update the global value
    
def wrongcounter():
    global wrongcount
    global bodycounter
    bodycounter()
    wrongcount = wrongcount + 1
    return (wrongcount) #this should increment the wrongcount by 1 and update the global value and update the body count

def coroner(): #takes bodycount and adjusts the body part variables appropriately
    global bodycount
    global head
    global torso
    global arm
    global arm2
    global leg
    global leg2
    global trapdoor
    if(bodycount) == 1:
        head = ("   O")
        return (head)
    if(bodycount) == 2:
        torso = ("|")
        return(torso)
    if(bodycount) == 3:
        arm = ("  /")
        return(arm)
    if(bodycount) == 4:
        arm2 = ("\ ")
        return(arm2)
    if(bodycount) == 5:
        leg = (" /")
        return(leg)
    if(bodycount) == 6:
        leg2 = (" \ ")
        return(leg2)
    if(bodycount) == 7:
        trapdoor = ("\   ")
        return(trapdoor)

def cremator(): #resets the body
    global head
    global torso
    global arm
    global arm2
    global leg
    global leg2
    global trapdoor
    head = ("   ")
    arm = ("   ")
    torso = (" ")
    arm2 = (" ")
    leg = ("  ")
    leg2 = ("  ")
    trapdoor = ("____")
    return(head)
    return(torso)
    return(arm)
    return(arm2)
    return(leg)
    return(leg2)
    return(trapdoor)

def num_of_letters():#adjusts the underscores to fit the selected word
    global position2
    global position3
    global position4
    global position5
    global position6
    global position7
    global position8
    global position9
    if(word_selection [0]) == 1: #this didn't hate me
        position2 = (" ")
        position3 = (" ")
        position4 = (" ")
        position5 = (" ")
        position6 = (" ")
        position7 = (" ")
        position8 = (" ")
        position9 = (" ")
        return position2
        return position3
        return position4
        return position5
        return position6
        return position7
        return position8
        return position9
    if(word_selection [0]) == 2:
        position3 = (" ")
        position4 = (" ")
        position5 = (" ")
        position6 = (" ")
        position7 = (" ")
        position8 = (" ")
        position9 = (" ")
        return position3
        return position4
        return position5
        return position6
        return position7
        return position8
        return position9
    if(word_selection [0]) == 3:
        position4 = (" ")
        position5 = (" ")
        position6 = (" ")
        position7 = (" ")
        position8 = (" ")
        position9 = (" ")
        return position4
        return position5
        return position6
        return position7
        return position8
        return position9
    if(word_selection [0]) == 4:
        position5 = (" ")
        position6 = (" ")
        position7 = (" ")
        position8 = (" ")
        position9 = (" ")
        return position5
        return position6
        return position7
        return position8
        return position9
    if(word_selection [0]) == 5:
        position6 = (" ")
        position7 = (" ")
        position8 = (" ")
        position9 = (" ")
        return position6
        return position7
        return position8
        return position9
    if(word_selection [0]) == 6:
        position7 = (" ")
        position8 = (" ")
        position9 = (" ")
        return position7
        return position8
        return position9
    if(word_selection [0]) == 7:
        position8 = (" ")
        position9 = (" ")
        return position8
        return position9
    if(word_selection [0]) == 8:
        position9 = (" ") 
        return position9
    if(word_selection [0]) == 9:
        print(" ")
    
def underscoreupdater(): #flip "_" to the corectly guessed letter based on the specific element for a specific position
    global position1
    global position2
    global position3
    global position4
    global position5
    global position6
    global position7
    global position8
    global position9
    #global guess
    global wrongcounter
    #needs to take the guess and compare it to the word. change the position when the guess matches the word. needs to look throught the whole word even after finding a match and replacing that.
    #y
    guess = input()
    if guess in word_selection:
        indices = []
        for i in range(len(word_selection)):
            if word_selection[i] == guess:
                indices.append(i)
        #if indices includes a 1, position1 = guess
        if 1 in indices:
            position1 = guess
        if 2 in indices:
            position2 = guess
        if 3 in indices:
            position3 = guess
        if 4 in indices:
            position4 = guess
        if 5 in indices:
            position5 = guess
        if 6 in indices:
            position6 = guess
        if 7 in indices:
            position7 = guess
        if 8 in indices:
            position8 = guess
        if 9 in indices:
            position9 = guess
    else:
        wrongcounter()
        coroner()

def letterguess():
    global positions #letterguess should do something with the input to make it so that each letter you guess either changes in the positions or adds to the bodycount
    global compare_arrays
    openingsequence()
    while compare_arrays == False:
        guess = input    
    
def interface():
    global num_of_letters
    num_of_letters()
    print("             _________")
    print("             |         |")
    print("             |      "+head)
    print("             |      "+arm+torso+arm2)
    print("             |       "+leg+leg2)
    print("             |")
    print("     _________________"+trapdoor+"_________")
    print(" ")
    print("                  ")
    print(str(position1) + " " + str(position2) + " " + str(position3) + " " + str(position4) + " " + str(position5) + " " + str(position6) + " " + str(position7) + " " + str(position8) + " " + str(position9)) #needs to be strings because something in the compare array function is converting things to int
   # print(position1+" "+position2+" "+position3+" "+position4+" "+position5+" "+position6+" "+position7+" "+position8+" "+position9)
    print(" ")

def tryagain(): #Might need to take out word_selection 
    global wrongcount
    global bodycount
    global word_selection
    global status
    global cremator
    global position1
    global position2
    global position3
    global position4
    global position5
    global position6
    global position7
    global position8
    global position9
    print("Try again?")
    print("y/n")
    tryagain = input ()
    if(tryagain) == "y":
        cremator()
        wrongcount = 0
        bodycount = 0
        status = 0
        word_selection = random.choice (wordlist)
        position1 = ("_")
        position2 = ("_")
        position3 = ("_")
        position4 = ("_")
        position5 = ("_")
        position6 = ("_")
        position7 = ("_")
        position8 = ("_")
        position9 = ("_")
        return position1
        return position2
        return position3
        return position4
        return position5
        return position6
        return position7
        return position8
        return position9
        return wrongcount
        return bodycount
        return word_selection
        return status
        #interface()
    #tryagain needs to reset wrongcounter to 0 and revert the bodycounter to 0. Then pick a new word from the list, reset the position counter to the value in the 0element, print interface, and then ask for the first guess.
    if(tryagain) == "n":
        print("No worries! I'll be waiting for you.")
        
def gameover():
    global wrongcount
    if(wrongcount) == 7:
#        trapdoor = ("\   ")
#        interface()
        wrongcount = wrongcount + 1
        print("*******Game over*******")
        tryagain()
        interface()
        return wrongcount
            
def compare_arrays(): #this should be able to tell if you've solved the word
    global word_selection
    global positions
    '''
    global position2 #don't currently need these since there's no words under 3 letters
    global position3
'''
    global position4
    global position5
    global position6
    global position7
    global position8
    global position9
    #'''
    global status
    if word_selection[0] == 8:
        position9 = 0
        positions = [position1,position2,position3,position4,position5,position6,position7,position8,position9,0,0]
        for i in range(11):
            if positions[i] != word_selection[i + 1]:
                status = False
                return status
        status = True
        return status
    if word_selection[0] == 7:
        position9 = 0
        position8 = 0
        positions = [position1,position2,position3,position4,position5,position6,position7,position8,position9,0,0]
        for i in range(11):
            if positions[i] != word_selection[i + 1]:
                status = False
                return status
        status = True
        return status
    if word_selection[0] == 6:
        position9 = 0
        position8 = 0
        position7 = 0
        positions = [position1,position2,position3,position4,position5,position6,position7,position8,position9,0,0]
        for i in range(11):
            if positions[i] != word_selection[i + 1]:
                status = False
                return status
        status = True
        return status
    if word_selection[0] == 5:
        position9 = 0
        position8 = 0
        position7 = 0
        position6 = 0
        positions = [position1,position2,position3,position4,position5,position6,position7,position8,position9,0,0]
        for i in range(11):
            if positions[i] != word_selection[i + 1]:
                status = False
                return status
        status = True
        return status
    if word_selection[0] == 4:
        position9 = 0
        position8 = 0
        position7 = 0
        position6 = 0
        position5 = 0
        positions = [position1,position2,position3,position4,position5,position6,position7,position8,position9,0,0]
        for i in range(11):
            if positions[i] != word_selection[i + 1]:
                status = False
                return status
        status = True
        return status


#hangman game
openingsequence()
print("*Magical grunt*")
while tryagain != "n":
    interface()
    while status != True:
        #guess = input()
        underscoreupdater()
        compare_arrays()
        interface()
        gameover()
        
    tryagain() # want to get the loop so that it can be played over and over
    break
    
