#hangmangame
print("Let's play Hangman!")
print("y/n")
start = input()

while(start) == "n":
    print("Okay, but come back when you want a challenge!")
    start = input()
if(start) == "y":
    print("Do you know how to play?")
    print("y/n")
tutorial = input()

while(tutorial) == "n":
    print("Ok!")
    print("The object of the game is for you to guess the word I'm thinking of before an innocent man is hanged!But I am not fully evil, so I will give to the number of letters and show you where they are in the word. And I will give you as many tries as you want to guess a letter or to solve the puzzle before I send this man to his Doom. Beware that you only get 6 wrong answers before I pull the lever")
    print("Make sense?")
    print("y/n")
    tutorial = input()
    while(tutorial) == "n":
        print("I'm not sure how much clearer I can be. Try rereading it again. Does it make sense now?")
        print("y/n")
        tutorial = input()
    if(tutorial) == "y":
        print("     ")
    
if(tutorial) == "y":
    print("Ok! Let's get started")
    print("Let me wake up the wizard and have him conjure the interface.")
    print("*Muffled Boot Kick* Wake up! We have a game to Play!")



#letters
#not sure why this has to be here but it pitches a fit about the letters being used in the array/lists/things without it
a="a"
b="b"
c="c"
d="d"
e="e"
f="f"
g="g"
h="h"
i="i"
j="j"
k="k"
l="l"
m="m"
n="n"
o="o"
p="p"
q="q"
r="r"
s="s"
t="t"
u="u"
v="v"
w="w"
x="x"
y="y"
z="z"

#word list
#0 element will dictate how many "_"s for letters
word =     [4,w,o,r,d,]
hangman =  [7,h,a,n,g,m,a,n]
computer = [8,c,o,m,p,u,t,e,r]
party =    [5,p,a,r,t,y]
paper =    [5,p,a,p,e,r]
silver =   [6,s,i,l,v,e,r]
food =     [4,f,o,o,d]



#Need the randomizer here to chose something from the arrays
wordlist = [word, hangman, computer, party, paper, silver, food]
#Random(wordlist)

#Need to figure out how to call an array and a specific value within it

wrongcount=0

#this is the correct placement for the full game over body currently with start of game stuff hashed out
head = ("   ")
arm = ("   ")
torso = (" ")
arm2 = (" ")
leg = ("  ")
leg2 = ("  ")
trapdoor = ("____")
#head = ("   O")
#arm = ("  /")
#torso = ("|")
#arm2 = ("\ ")
#leg = (" /")
#leg2 = (" \ ")
#trapdoor = ("\   ")


position1 = ("_")
position2 = ("_")
position3 = ("_")
position4 = ("_")
position5 = ("_")
position6 = ("_")
position7 = ("_")
position8 = ("_")
position9 = ("_")

#build position updaters here
#one to flip "_" to " " based on the 0 element of chosen word
#one to flip "_" to the corectly guessed letter based on the specific element for a specific position

#Master print for interface
print("             _________"), print("             |         |"), print("             |      "+ str(head)), print("             |      "+arm+torso+arm2), print("             |       "+leg+leg2), print("             |"), print("     _________________"+trapdoor+"_________"), print(" "), print("                  "), print(position1+" "+position2+" "+position3+" "+position4+" "+position5+" "+position6+" "+position7+" "+position8+" "+position9), print(" ")

#test input
wrong = input()

#All body count advancement is here
if(wrong) == "wrong":
    wrongcount = wrongcount + 1
    if(wrongcount) == 1:
        head = ("   O")
        #print(interface) Ideally I can just continually keep updating the interface values with all the dominos going from there.
        print("             _________"), print("             |         |"), print("             |      "+ str(head)), print("             |      "+arm+torso+arm2), print("             |       "+leg+leg2), print("             |"), print("     _________________"+trapdoor+"_________"), print(" "), print("                  "), print(position1+" "+position2+" "+position3+" "+position4+" "+position5+" "+position6+" "+position7+" "+position8+" "+position9), print(" ")
        wrong = input()
        print(" ")
        if(wrong) == "wrong":
            wrongcount = wrongcount + 1
        if(wrongcount) == 2:
            torso = ("|")
            #print(interface) Ideally I can just continually keep updating the interface values with all the dominos going from there.
            print("             _________"), print("             |         |"), print("             |      "+ str(head)), print("             |      "+arm+torso+arm2), print("             |       "+leg+leg2), print("             |"), print("     _________________"+trapdoor+"_________"), print(" "), print("                  "), print(position1+" "+position2+" "+position3+" "+position4+" "+position5+" "+position6+" "+position7+" "+position8+" "+position9), print(" ")
            wrong = input()
            print(" ")
            if(wrong) == "wrong":
                wrongcount = wrongcount + 1
        #etc for 10
        #if(wrongcount) == 10:
            #print("Game over")
            
        #I want to return the head value out from hear to change the global 'head' variable
        #return (head,wrongcount) #just saying "SyntaxError: 'return' outside function"
        #Maybe I can just copy all the previous code into it'self so that all the updated variables were within the scope cause its after the decision (JK, that would be a massive memory hog after a few rounds)
        
   
        
    wrong = input()



def display_info(first_name, last_name):
    print('First Name:', first_name)
    print('Last Name:', last_name)
    
display_info(last_name = 'Cartman', first_name = 'Eric')
# so this worked. Let's see if it becomes global or just back to when it was defined. On the levels of scope








        

#Pass a whole page for animations if this compiler would keep the coursor in veiw the whole time
#print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*"), print("*") 
#should be 26 lines

































